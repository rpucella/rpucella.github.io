<script>
  document.title = "Static Web Site Generation (Part 3)" + ' — Riccardo Pucella'
  document.querySelector("#blogging").classList.add("active")
</script>

<main>
  
  <article class="post">
  
    <h1 class="title">Static Web Site Generation (Part 3)</h3>
    
    <div class="date">May 20, 2023</div>
    
    <div class="body">
      <p><em>Previous posts in the series: <a href="/blog/posts/2023/static-web-site-generation">Part 1</a>, <a href="/blog/posts/2023/static-web-site-generation-2">Part 2</a></em>.</p>

<p>This is the latest installment of a series detailing how I maintain this website through a
custom-built static web site generator I call <code>webgen</code>. Earlier posts described the <a href="../static-web-site-generation">general
architecture of the tool</a>, which is based on the idea of injecting HTML content files into templates
to produce pages that can be statically served using a bog-standard file-based web server. (In the
case of this website, <a href="https://pages.github.com/">Github Pages</a>.)</p>

<p>What I'd like to talk about today is the support I coded into <code>webgen</code> for maintaining this blog. It
builds directly onto the <a href="../static-web-site-generation-2">Markdown processing I described in my last post</a>.</p>

<p>Rather than being abstract and general like I've been until now, though, let me show how this very
blog is set up. The reason is less pedagogical than expedient: blog support in <code>webgen</code> is very much
geared towards how I thought about setting up this blog in the first place and how I want to work on
my posts. Let's just say that it's not the most generic tool I've ever written.</p>

<p>You can follow along at <a href="https://github.com/rpucella/rpucella.github.io">https://github.com/rpucella/rpucella.github.io</a>. The blog is hosted under
<code>/blog/</code>. In that folder, there's a <code>webgen</code> source folder <code>.__src</code> holding templates. The template for
the website as a whole is <code>/.__src/CONTENT.template</code>. (Note that I'm using <code>.__src</code> instead of the
<code>__src</code> folders that I described in earlier posts. The leading dot is optional in <code>webgen</code>, and I'm
using it here because on Github Pages it prevents the folder from being served. Not that it would
greatly matter if it were, but it's slightly cleaner.)</p>

<p>Source folder <code>/blog/.__src/</code> contains a subfolder <code>POSTS/</code> understood by <code>webgen</code> and holding the blog
posts source. Each blog post is in its own subfolder in <code>POSTS/</code>. For instance, this post
is in <code>/blog/.__src/POSTS/static-web-site-generation-3/</code> and contains two files, the Markdown source document
of the post <code>index.md</code>, and the image file <code>sunset.jpg</code> for this image:</p>

<p><img alt="Sunset" src="./sunset.jpg" style="display: block; margin: 0 auto;"></p>

<p>(Photo by <a href="https://unsplash.com/@joshua_j_woroniecki?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Joshua Woroniecki</a> on <a href="https://unsplash.com/photos/Nb_eHP8D1x8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>)</p>

<p>The Markdown source document starts with metadata for the title and date of posting:</p>

<pre><code>---
title: Static Web Site Generation (Part 3)
date: 2023-05-20
---

*Previous posts in the series: [Part 1](/blog/post/static-web-site-generation), 
[Part 2](/blog/post/static-web-site-generation-2)*.
...
</code></pre>

<p>Running <code>webgen</code> will find <code>/blog/.__src/POSTS/</code>, recognize it as a collection of blog posts, and
generate both the posts content proper and a summary page. Let's see how that's done.</p>

<p>The posts content is generated by first creating a subfolder <code>/blog/post/</code>, and copying every
subfolder in <code>/blog/.__src/POSTS/</code> to <code>/blog/post/</code>. This means, in particular, that the subfolder name
chosen in <code>POSTS/</code> for the post becomes part of the route for serving the post on the website. The
only adjustment made to the copied folder is that the source file <code>index.md</code> is
moved to a source subfolder <code>.__src/</code> of the copied folder.</p>

<p>Generating <code>/blog/post/</code> is the first thing <code>webgen</code> does before all other generations. Thus, subsequent
generation passes will translate all Markdown files into HTML content files, including those source
<code>index.md</code> files that have been placed in the appropriate subfolders of <code>/blog/post/</code>. As usual with
<code>webgen</code>, the generated <code>index.content</code> files will get converted to HTML files by injecting
them into the website template. All in all, once <code>/blog/post/</code> is created and <code>__src/POSTS/</code> subfolders
are copied, the rest of the process relies on how <code>webgen</code> works independently of any blog
support.</p>

<p>Posts for this blog are formatted with the help of a template <code>/blog/.__src/MARKDOWN.template</code> that
knows how to handle the title and date present in the metadata of the various <code>index.md</code> files:</p>

<pre><code>&lt;main&gt;

  &lt;article class=&quot;post&quot;&gt;

    &lt;h1 class=&quot;title&quot;&gt;{{ .Title }}&lt;/h3&gt;

    &lt;div class=&quot;date&quot;&gt;{{ .FormattedDate }}&lt;/div&gt;

    &lt;div class=&quot;body&quot;&gt;
      {{ .Body }}
    &lt;/div&gt;

    {{if .Reading}}
      &lt;div class=&quot;reading&quot;&gt;{{ .Reading }}&lt;/div&gt;
    {{end}}

  &lt;/article&gt;

&lt;/main&gt;
</code></pre>

<p>Just like all other <code>webgen</code> templates, the syntax is simply that of Go's <a href="https://pkg.go.dev/html/template"><code>html/template</code></a> package.</p>

<p>As part of the creation of <code>/blog/post/</code>, <code>webgen</code> also creates a summary page — basically a table of
content for the blog, listing all the posts. The tool simply pulls all the metadata from all the
posts it copies to <code>/blog/post/</code> and collects them into <code>/blog/.__src/index.content</code> using a dedicated
posts summary template <code>/blog/.__src/SUMMARY.template</code>:</p>

<pre><code>&lt;main&gt;

  &lt;h1&gt;Close Encounters of the Logical Kind&lt;/h1&gt;

  &lt;p&gt;Infrequent riffs about software development, computer science, and mathematics.&lt;/p&gt;

  {{ range .Posts }}

    &lt;article class=&quot;summary&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;/blog/post/{{ .Key }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/div&gt;
      &lt;div class=&quot;date&quot;&gt;{{ .FormattedDate }}&lt;/div&gt;
    &lt;/article&gt;

  {{ end }}

&lt;/main&gt;
</code></pre>

<p>The resulting <code>index.content</code> file will get converted to a final HTML file by <code>webgen</code> in the usual way.</p>

<p>Full disclosure: I'm not entirely happy with how summarizing is done. Among other things, it
requires a template <code>SUMMARY.template</code>, unlike elsewhere in <code>webgen</code> where templates are entirely
optional. It also does not support pagination, so this won't scale if this blog ever gets large. I
expect, however, that I'll have a sense of what a better approach is by then. Meanwhile, I'll live
with the current design.</p>

<p>Aside from the summary page generation, I'm really happy about how blog support came out. It fits
seamlessly with the cascaded generation philosophy: blog post generation merely lays out the
structure of the blog posts hierarchy, and doesn't need to know anything about how the final content
gets turned into final HTML.</p>

<p>This is obviously not a complete blog hosting solution. It lacks basic features such as tagging or
previous/next post navigation. Those should be straightforward to add, though, when I have a bit of
free time. Stay tuned.</p>

    </div>

    
      <div class="reading">The Ebony Tower (by John Fowles)</div>
    

     <div class="human">This post was written entirely by a human.</div>

  </article>
  
</main>
