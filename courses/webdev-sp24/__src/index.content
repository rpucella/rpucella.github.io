
<main id="main">
  
  <h1>Full-Stack Web Development (Spring 2024)</h1>
  
  <p>
    An intensive introduction to the full stack of modern web
    development, including HTML and CSS, JavaScript, client-side
    frameworks (React, Angular, Vue, ...), server-side templates,
    server-side frameworks (Flask, Express, ...), authentication,
    persistence, REST APIs, and websockets.
  </p>
  
  <section id="info">
    <h2>Course Information</h2>

    <ul class="plain">

      <li><b>Course number:</b> ENGR 3599</li>

      <li><b>Prerequisites:</b> Software Design. I'm expecting that you know how to program at least in Python.</li>

      <li><b>Location and Time:</b>
        MAC 328 <del>MAC 126</del> / Tue 6-8:40pm
      </li>


      <li><b>Instructor:</b> <a href="https://www.rpucella.net">Riccardo Pucella</a> (&#x72;&#x69;&#x63;&#x63;&#x61;&#x72;&#x64;&#x6F;&#x2E;&#x70;&#x75;&#x63;&#x65;&#x6C;&#x6C;&#x61;&#x40;&#x6F;&#x6C;&#x69;&#x6E;&#x2E;&#x65;&#x64;&#x75;)
      </li>

      <li><b>Office hours:</b> MH 353 / Tue 4-5pm (before class) / I'm also available at other times over Zoom by request, just contact me
      </li>

      <li><b>Textbooks:</b> There is no required textbook. We'll mostly be using freely available resources, or documents I will share with you. If you truly want a textbook, the following is a reasonably broad overview of the field as it existed a decade ago, going into a lot of details about the basics, which haven't changed that much since then anyway.

        <ul>
          <li>Sebasta, <a href="https://www.pearson.com/us/higher-education/program/Sebesta-Programming-the-World-Wide-Web-8th-Edition/PGM30365.html"><i>Programming the World Wide Web</i></a>, Pearson. 2015</li>
        </ul>

        Generally speaking, the technology evolves way too quickly for any good book to be up-to-date with what's currently available out there. Still, the above generally sticks to foundational topics that remains true.
      </li>
      
      <li><b>Grading</b> Weekly or bi-weekly homeworks (60% of final grade) and a final project and
        presentation (40% of final grade).  All work done in teams of 2. Late work will be penalized
        (10% per 24 hours) and no work will be accepted after its solution has been discussed in
        class. You have a bank of 3 "hall pass" days &mdash; each of which giving a 1-day extension
        on the homework &mdash; that you can apply to any homework. You can use those days on a
        single homework, or multiple homeworks.

        <b>Please do not post your homework code on a publicly available repository like
          GitHub.</b>
      </li>
      
      <li><b>Course Assistant:</b> Trevor Zou</li>
      
      <li><b>Chat server:</b> Announcements and discussions take place on <a href="https://chat.rpucella.net/webdev-sp24" target="_blank">our chat server</a>, which double as our homework submission server. You should have received account information by email. If not, please reach out.
      </li>

      <li><b>Honor code:</b> I expect all of us to follow the <a href="https://www.olin.edu/student-life-student-affairs-and-resources/student-rights-responsibilities">Olin Honor Code</a>.
      </li>
      
  </section>

  <section id="lectures">

    <h2>
      Lectures and Readings
    </h2>

    <p>Subject to changes.</p>

    <ul class="lectures">

      <li><p><span class="hdr">Jan 23: </span><b>Introduction and HTML Overview</b></p>
        <div class="lect">

	    <p><a href="notes/intro-html.pdf">Slides from the lecture</a>.</p>

            <p>The <a href="https://home.cern/science/computing/birth-web/short-history-web">history of the web</a> from CERN. Also from CERN, the <a href="http://info.cern.ch/hypertext/WWW/TheProject.html">first web page</a>.</p>

            <p><a href="https://developer.mozilla.org/en-US/">MDN Web Docs</a>, formerly the Mozilla
              Developer Network, is the most accurate source of information on web tech that you can
              find. They have a fantastic <a href="https://developer.mozilla.org/en-US/docs/Web">Web
                Tech portal page</a>.</p>

            <p>Also from MDN:</p>

              <ul>
            
                <li>the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML</a> pages that describe pretty much everything you need to know;</li>

                <li>an introduction to
              the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">Document
              Object Model</a>;
                </li>

                <li>an overview of how browsers render various pieces of a web document, so-called
                  the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_mode">layout</a>; the
              basic rendering algorithm with block and inline element I alluded to in class is
              the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/Block_and_Inline_Layout_in_Normal_Flow">flow
                    layout</a>
                </li>
              </ul>

            <p>
              This article describes
              the <a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/">process
                of turning a web document into a rendered page</a> in overwhelming detail. Note that
              it also takes styling into account.
            </p>
            
            <p>
              You will want to become familiar with your browser's <a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Tools_and_setup/What_are_browser_developer_tools">Developer Tools</a>, which provide you with a way to access the DOM visually, and see what your browser sees on the page and interact with it. Every browser has them. The above info is for Firefox, but you have them for <a href="https://developer.chrome.com/docs/devtools">Chrome</a> and <a href="https://developer.apple.com/documentation/safari-developer-tools">Safari</a> as well.
            </p>
          
        </div>
      </li>

      <li><p><span class="hdr">Jan 30: </span><b>Styling and CSS</b></p>
        <div class="lect">
	    <p><a href="notes/styling-css.pdf">Slides from the lecture</a>.</p>

	    <p>A complete version of the <a href="demos/css/index.html">HTML code</a> we worked on in class. You can look at the code by using your browser's <b>View Source</b> option. (Find it for your browser.) You'll see some changes from what we've done, including adding links, a fixed footer, and a fun slanted title with the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transforms"><tt>transform</tt> property</a>.</p>

            <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">MDN CSS</a> pages that describe pretty much everything you need to know.</p>

            <p>The <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance">cascade</a> part of CCS.</p>

            <p>CSS rules are defined using selectors. There is a pretty involved <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors">language of selectors</a> that you can use in rules.</p>

            <p>Which CSS rule applies when multiple rules affect an element depends on the <a href="https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/">specificity of the rules involved</a>.</p>

            <p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes">Pseudo-classes</a> are a way to define rules to apply to certain elements in certain states.</p>

            <p>Distinctions between <a href="https://www.samanthaming.com/pictorials/css-inline-vs-inlineblock-vs-block/"><code>inline</code>, <code>inline-block</code>, and <code>block</code></a> for the <code>display</code> property.</p>

            <p>The canonical introduction to <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">Flexbox</a>.</p>

	    <p>The two "rules of design" that I alluded to in class: <a href="https://tanzu.vmware.com/content/built-to-adapt/intro-to-the-8-point-grid-system-2
">The 8 point grid system</a>, and <a href="https://ianstormtaylor.com/design-tip-never-use-black/">Never use black</a>. Your mileage will vary, obviously, but they are effective rules to keep in mind.</p>

        </div>
	
      </li>
      

      <li><p><span class="hdr">Feb 6: </span><b>Javascript</b></p>
        <div class="lect">
            
	  <!-- <p><a href="slides/JavaScript.pdf">Slides from the lecture</a>.</p> -->
          
          <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">MDN
              JavaScript</a> pages that describe pretty much everything you need to know, including
            useful tutorials and references to built-in objects. </p>

          <p>The <a href="https://tc39.es/ecma262/">current EMCAScript standard
          (ES2024)</a>. Its <a href="https://tc39.es/ecma262/#sec-intro">introduction</a> gives good
          overview of what the previous versions of the standard added to the language.</p>

          <p>A description of the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">class system</a> in JavaScript.</p>

	  <p>A discussion of the various forms of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness">equality</a> in JavaScript.</p>
	    
          <p>An interesting <a href="https://auth0.com/blog/a-brief-history-of-javascript/">history of JavaScript</a>. A referenced link from that article points to words by the <a href="https://brendaneich.com/2008/04/popularity/">creator himself</a>.
          </p>
        </div>
      </li>

      <li><p><span class="hdr">Feb 13: </span><b>The DOM and Events</b></p>
        <div class="lect">

	    <p><a href="notes/dom.pdf">Slides from the lecture</a>.</p>

            <p>The demo code I played with in lecture: file <a href="demos/dom/dom-demo.html"><code>dom-demo.html</code></a>; file <a href="demos/dom/dom-demo.js"><code>dom-demo.js</code></a>. (If you click on these links, the browser will open them as HTML documents. To download them to your machine, right-click on the link and chose "Save Link As..." or something equivalent.)</p>

            <p>MDN documentation entry point on the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/">Document Object Model</a>.</p>

            <p>Key classes in the DOM: The <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node">Node</a> class; the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element">Element</a> class; the <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement">HTMLElement</a> class.</p>

            <p>Finding elements in the DOM: a general <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors">introduction</a>; the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById">getElementById()</a> method; the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector">querySelector()</a> method; the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll">querySelectorAll()</a> method.</p>

            <p>A <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces">complete example</a> of how to manipulate an HTML table in JavaScript that illustrates all the features of creating elements and adding them to the DOM tree.</p>

            <p>
              MDN <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events">introduction to events</a>, as well as a list of all <a href="https://developer.mozilla.org/en-US/docs/Web/Events">events types bucketed by category</a>. The MDN introduction includes a good description of event propagation (where an event triggered on an element will propagate or bubble up through its parent elements).
            </p>

            <p>
              In the demo I used the <tt>on<it>event</it></tt> property to assign an event handler to a specific element. That lets you assign a single event handle to that element. If you want more than one handler, then you can use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">addEventListener()</a> method, which also lets you remove an event handler. (This is mostly useful when you write modular code that attaches itself to an existing element, and needs to do so irrespectively of whether there are already handlers on that elements.) You can <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers">read a description of these two approaches</a>.
            </p>

        </div>
      </li>

      <li><p><span class="hdr">Feb 20 - 27: </span><b>MVC</b></p>
        <div class="lect">
	  
	  <p><a href="notes/mvc.html">Rough notes on MVC from lecture</a>.</p>
	  
          <p>The demo code I played with in lecture: <a href="demos/mvc/mvc.html"><code>mvc.html</code></a> and <a href="demos/mvc/mvc.js">mvc.js</a>. This is the version that includes the data fetching functionality. (If you click on these links, the browser will open them as HTML documents. To download them to your machine, right-click on the link and chose "Save Link As..." or something equivalent.)</p>
	  
	  <p>MDN page on <a href="https://developer.mozilla.org/en-US/docs/Glossary/MVC">MVC</a>. Note that most articles are about a specific flavor of MVC, which is not necessarily helpful. (Though if you read enough of those you can spot the common core, which is MVC.) The following article by Fowler, <a href="https://martinfowler.com/eaaDev/uiArchs.html"><i>GUI Architectures</i></a>, is at least tolerable, though it focuses on GUI architectures and not on MVC as we have been applying it to HTML documents and JavaScript. And if you have time for it, I'd dig around Fowler's writing a bit while you're there &mdash; much of it is useful and a good read.</p>

	  <p>You can read the original paper describing MVC by Krasner and Pope, <a href="./references/mvc-krasner-pope.pdf"><i>A Description of the MVC User Interface Paradigm in the Smalltalk-80 System</i></a>. Note that it is based on <a href="https://en.wikipedia.org/wiki/Smalltalk">Smalltalk</a>, a delightful old object-oriented language that now lives on mostly as the source of the object-oriented component of Objective-C.</p>
	    
	  <p>The <a href="notes/fetch.pdf">slides on fetching data</a> in Javascript that I showed in class.</p>
	    
	  <p>MDN pages on the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">fetch</a> function, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">promises</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises">using promises</a>.</p>

	  <p>A useful <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">tutorial on promises</a> that should give you some insight into how to use promises. This tutorial also uses the old <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest">XMLHttpRequest</a> method to fetch data in JavaScript.</p>

	  <p>(If you read about promises, eventually you will encounter <i>asynchronous functions</i>, which we will come back to later in the course. They're basically about using promises in a different (more natural?) way.)</p>
	    
        </div>
      </li>

      <li><p><span class="hdr">Mar 5: </span><b>React</b></p>
        <div class="lect">

          <p><a href="notes/react1.html">Notes from the lecture</a>.</p>

          <p>The <a href="demos/react/test.html">first demo</a> I showed in class, with two counters with different initial values. As usual, to see the underlying code, you'll have to right-click on the link and download the <tt>.html</tt> file.</p>

          <p>A first reimplementation of our picture viewer in React: <a href="demos/react/app.html"><tt>app.html</tt></a> and <a href="demos/react/app.js"><tt>app.js</tt></a>. Pay special attention to the React state in the <tt>App</tt> component (there are two state variables created) and how the functions to update that state get passed down to subcomponents so that they can update that state when needed.</p>

          <p>

        </div>
      </li>

      <li><p><span class="hdr">Mar 12: </span><b>React in practice</b></p>
        <div class="lect">

          <p><a href="notes/react2.pdf">Notes from the lecture</a>.</p>

          <p>A JSX-based reimplementation of our picture viewer in React: <a href="demos/picture-viewer-cra.zip"><tt>picture-viewer-cra.zip</tt></a>. You'll need <a href="https://nodejs.org/">Node.js</a> installed. To create the demo, open a command line in the <tt>picture-viewer-cra</tt> directory, and type <tt>npm install</tt>, which will install all the required packages. Then hit <tt>npm start</tt> to bundle and start the app.</p>

          <p>The <a href="https://react.dev/">React documentation</a> is actually pretty reasonable. You also may want to check out the sample <a href="https://react.dev/learn/tutorial-tic-tac-toe">tutorial</a>.</p>

          <p>Overview of <a href="https://react.dev/learn/writing-markup-with-jsx">JSX</a>.</p>
          
          <p>I used <a href="https://create-react-app.dev/">Create React App</a> as a quick start for setting up a new project, but it's being slowly phased out. Not entirely sure what will replace it yet.</p>
          
          <p>A <a href="https://www.w3schools.com/react/react_es6_modules.asp">quick summary of how modules</a> (aka ES6 modules) work in React. (I dislike W3 Schools links, so it breaks my heart to link to one, but it's the least confusing summary I could find.)</p>

        </div>
      </li>

      <li><p><span class="hdr">Mar 26: </span><b>Web Application Servers</b></p>
        <div class="lect">

	    <p>Slides from the <a href="notes/web-app-servers.pdf">lecture</a>.</p>

            <p>The <a href="demos/picture-viewer-flask.zip">code for the flask web application server</a> I demoed in class.. Unzip and look at the <tt>README.md</tt> file for installing and running the code.</p>

	    <p>An introduction to <a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Introduction">web application servers</a>, and an overview of <a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Web_frameworks">web frameworks</a> for programming said web application servers.</p>

	    <p>The official <a href="https://flask.palletsprojects.com/en/3.0.x/">Flask</a> documentation.</p>

	    <p>An overview of <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview">HTTP</a>, and a deeper-dive into the specific format of <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages">HTTP requests</a>.</p>
        </div>
      </li>


      <li><p><span class="hdr">Apr 2: </span><b>Persistence</b></p>
        <div class="lect">

	    <p>Slides from the <a href="notes/persistence.pdf">lecture</a>.</p>

            <p>The <a href="demos/picture-viewer-persistence.zip">code for the flask web application server with persistence</a> I demoed in class. You can run the server using the same technique as the web application server from last class (it's a variation on that code). By pulling the right implementation from the <tt>dbs</tt> folder by modifying the <tt>from dbs.pictures_<i>XXX</i></tt> line of <tt>app.py</tt>, you can support no persistence, file-system persistence (via a CSV file), and database persistence thought SQLite either via a direct connection, Active Records, or Data Mapping. Using <a href="https://www.sqlite.org/">SQLite</a> will require you to create the tables using the SQL code in <tt>schema.ddl</tt>.</p>

            <p>Wikipedia articles on <a href="https://en.wikipedia.org/wiki/Relational_database">relational databases</a> and <a href="https://en.wikipedia.org/wiki/NoSQL">nonrelational databases</a>.</p>

            <p>A lucid blog post on <a href="https://www.jamesserra.com/archive/2015/08/relational-databases-vs-non-relational-databases/">relational and nonrelational databases</a>. Bottom line: they address different problems. You can read more about document-oriented databases <a href="https://ravendb.net/articles/nosql-document-oriented-databases-detailed-overview">here</a>.</p>

            <p>Wikipedia page on the <a href="https://en.wikipedia.org/wiki/Active_record_pattern">Active Records design pattern</a>, and the <a href="https://rubyonrails.org/">Ruby on Rails</a> <a href="https://guides.rubyonrails.org/active_record_basics.html">tutorial on active records</a>. (Ruby on Rails is one of the most widely used server-side framework based on the active records pattern.</p>

            <p>Wikipedia page on the <a href="https://en.wikipedia.org/wiki/Data_mapper_pattern">Data Mapper design pattern</a>. Most existing <a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping">ORM</a> systems implement the data mapper pattern, including <a href="https://www.sqlalchemy.org/">SQLAlchemy</a> for Python.</p>

	    <p>The difference between Active Records and Data Mapping (which I somewhat bungled in class) is tricky to make clear without concrete examples. One page of documentation (from the TypeORM Javascript-based ORM) does make <a href="https://orkhan.gitbook.io/typeorm/docs/active-record-data-mapper">the distinction somewhat clear</a> though it doesn't really explain when you should use one versus the other. The biggest difference is that Active Records basically reflects the structure of the data in the database into your code, while Data Mapping lets you add a level of indirection, allowing the structure of the data in the database to differen from how you want to access the data in your code.</p>

	</div>

      </li>

      <li><p><span class="hdr">Apr 9: </span><b>Cookies and Authentication</b></p>
        <div class="lect">

	  <p><a href="notes/cookies.pdf">Slides</a> from the lecture.</p>

          <p>The <a href="demos/cookies.zip">cookies demo</a> and the <a href="demos/auth.zip">authentication demo</a> from lecture.</p>

	  <p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies">MDN tutorial</a> on cookies. <a href="https://tools.ietf.org/html/rfc6265">RFC 6265</a> is the precise IETF standard on state management via cookies, a surprisingly readable document once you get to Section 3.</p>

	  <p>An entertaining and illuminating writeup by David Kristol, <a href="https://arxiv.org/abs/cs/0105018"><i>HTTP Cookies: Standards, Privacy, and Politics</i></a>, where he discusses work on RFC 2965, the previous Cookie standard before the current RFC 6265.</p>

          <p>Wikipedia article on <a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function">cryptographic hash functions</a> that you should use instead of passwords inside a database of users, and an interesting thread on security.stackexchange on <a href="https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords">how to securely hash passwords</a>. Turns out it's subtle. By the way, the fact that databases don't store passwords but hash is the reason why you can't ask an app to give you back your password when you've forgotten it, but rather forces you to reset your password: the app doesn't actually have your password so can't give it back to you.</p>

          <p>An older but still relevant security.stackexchange thread
          on <a href="https://security.stackexchange.com/questions/81756/session-authentication-vs-token-authentication">session
          authentication versus token authentication</a> with some
          interesting links.</p>

          <p>If you're interested in token authentication (where
          authentication is kept on the browser), you'll probably want
          to
          use <a href="https://en.wikipedia.org/wiki/JSON_Web_Token">JWT</a>
          which are supported by libraries on all server-side
          infrastructures.</p>

          <p>If you're interested in using SSO (single sign-on), or
            allowing a user to log into your web app using their
            Google credentials (say), then you'll want to read
            about <a href="https://en.wikipedia.org/wiki/OAuth">OAuth</a>.</p>
	  
	</div>
      </li>

      <li><p><span class="hdr">Apr 16: </span><b>RESTful APIs</b></p>
        <div class="lect">

	  <p>(Two things I talked about at the beginning of class: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">asynchronous functions in Javascript</a>, and <a href="https://www.splunk.com/en_us/blog/learn/serverless-functions.html">serverless functions</a>.)</p>

	  <p><a href="notes/rest.pdf">Slides</a> from the lecture.</p>

          <p>Fielding's dissertation that introduced the notion of <a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">REST</a>.</p>

          <p>Wikipedia page on <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD operations</a>.</p>

          <p>A reasonably lucid site for delving into the <a href="https://restfulapi.net/">RESTful API methodology</a>.</p>

          <p>MDN description of the various <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">HTTP methods</a>.</p>

          <p>A RESTful API in the wild: the <a href="https://docs.github.com/en/rest">GitHub REST API</a>.</p>
	  
	</div>
      </li>
      
    </ul>

  </section>


  <section id="homeworks">
    
    <h2>Homeworks</h2>
    
    <ul class="plain">
      <li><a href="./homeworks/1">Homework 1</a> &mdash; due Sunday Feb 11</li>
      <li><a href="./homeworks/2">Homework 2</a> &mdash; due Sunday Feb 25</li>
      <li><a href="./homeworks/3">Homework 3</a> &mdash; due Wednesday Mar 13</li>
      <li><a href="./homeworks/4">Homework 4</a> &mdash; due Wednesday Apr 3</li>
    </ul>
    
  </section>
  
</main>
