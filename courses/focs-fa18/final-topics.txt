
OCAML PROGRAMMING

- you should be able to create or complete small functions (at the
  level of the easy functions in the first homework).
- you should be able to use higher order function such as map, filter,
   and fold_right (at the level of the easy functions in the homeworks) .


ABACUS:

- you should be able to determine the function accepted by a given
  flow diagram (abacus)
- you should be able to create a flow diagram (abacus) computing a
  given function
  

FORMAL LANGUAGES: definitions of strings and languages, operations on
languages.

- you should be able to determine if a string belongs to a language
  described by applying operations such as union, concatenation, and
  star.


REGULAR LANGUAGES: definitions of regular expressions, finite automata
(deterministic and nondeterministic), properties of regular languages,
examples of regular languages, examples of non-regular languages.

- you should be able to describe the language denoted by a given
  regular expressiion
- you should be able to describe the language accepted by a given
  finite  automaton  
- you should be able to give a regular expression denoting a given
  regular language
- you should be able to create a finite automaton accepting a given 
  regular language


TURING MACHINES: definitions of Turing machines, configurations,
enumerable languages, decidable languages, totality.

- you should be able to determine the language accepted by a given
  Turing machine
- you should be able to create a Turing machine accepting a given
  language


PRODUCTION GRAMMARS: definition of context-free and unrestricted
grammars, rewrite relation, definition of context-free languages.

- you should be able to determine the language generated by a given
  grammar
- you should be able to create a context-free grammar generating a
  given language
- you should be able to create an unrestricted grammar generating a
  given language


LAMBDA CALCULUS: definition of terms and the simplification
relation, standard encodings for natural numbers, Booleans, and
pairs, implementation of recursive definitions.

- you should be able to simplify lambda calculus terms
- you should be able to create lambda calculus terms


DATAFLOW NETWORKS:

- you should be able to determine the stream generated by a given
  dataflow network (possible as a function of its inputs)
- you should be able to create a dataflow network producing a
  given stream


No questions on concurrency or cellular automata.
